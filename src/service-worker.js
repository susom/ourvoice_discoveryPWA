/* eslint-disable no-restricted-globals */

import { clientsClaim } from 'workbox-core';
import { precacheAndRoute } from 'workbox-precaching';


clientsClaim();

// Precache all of the assets generated by your build process.
const filteredManifest = self.__WB_MANIFEST.filter((entry) => {
    return entry;
});
precacheAndRoute(filteredManifest);

console.log('Service Worker: Precaching is done', filteredManifest);

// This will be called when the install event fires.
self.addEventListener('install', event => {
    // Force the service worker to become active immediately after installation
    self.skipWaiting();
});

// This event is fired after the install event and is generally used to clean up
// old caches or perform tasks that should only be done after an update.
self.addEventListener('activate', event => {
    // Call claim() to allow an active service worker to set itself as the controller for all
    // clients within its scope.
    event.waitUntil(self.clients.claim());
});

self.addEventListener('fetch', event => {
    event.respondWith(
        fetch(event.request).catch(() => {
            // For navigation requests, fall back to the root index.html file.
            if (event.request.mode === 'navigate') {
                return caches.match('/index.html');
            }

            // For non-navigation requests, you can decide what fallback to provide if any.
            return caches.match(event.request).then(response => {
                return response || caches.match('/offline.html');
            });
        })
    );
});

